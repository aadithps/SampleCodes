import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Create PDF file with n pages of the same content repeated.
 */
public class PDFWithTextAndGraphics {

    public static void main(String[] args) throws IOException {

        int n = 5; // Define the number of pages

        /*
         * Create text stream with a few lines
         */
        TextStreamObject textStreamObject = new TextStreamObject("F1", 18, 30, 100, "Hello World");
        textStreamObject.add("F1", 11, 30, 40, "Hope you all are enjoying Its All Binary articles!");
        textStreamObject.add("F1", 11, 30, 30, "Now let's create PDF with " + n + " pages, texts & graphics.");

        /*
         * Create graphic stream with few graphics.
         */
        GraphicStreamObject graphicStreamObject = new GraphicStreamObject();
        graphicStreamObject.addFilledRectangle(100, 600, 50, 75, "0.75 g");
        graphicStreamObject.addLine(100, 100, 400, 500);

        /*
         * Prepare pages & catalog objects.
         */
        PageCollectionObject pageCollectionObject = new PageCollectionObject();

        for (int i = 0; i < n; i++) {
            PageObject page = new PageObject();
            page.addAttribute("Resources", new FontObject("F1", "Times-Roman"));
            page.addContent(textStreamObject);
            page.addContent(graphicStreamObject);
            page.addAttribute("MediaBox", "[0 0 300 200]");
            pageCollectionObject.addPage(page);
        }

        CatalogObject catalogObject = new CatalogObject(pageCollectionObject);

        /*
         * Build final PDF.
         */
        PDF pdf = new PDF(catalogObject);

        /*
         * Write PDF to a file.
         */
        FileWriter fileWriter = new FileWriter("generatedPDFWithGraphics.pdf");
        fileWriter.write(pdf.build());
        fileWriter.close();

    }

}

/**
 * Representation of entire PDF file.
 */
class PDF {

    private CatalogObject catalogObject;

    private int objectCount = 0;

    public PDF(CatalogObject catalogObject) {
        this.catalogObject = catalogObject;
    }

    public String build() {
        populateObjectNumbers();
        StringBuilder pdf = new StringBuilder();
        pdf.append("%PDF-1.1\n\n");

        pdf.append(catalogObject.build());
        pdf.append(catalogObject.getPages().build());

        for (PageObject page : catalogObject.getPages().getPages()) {
            pdf.append(page.build());
            if (page.getContent() != null) {
                pdf.append(page.getContent().build());
            }
        }

        pdf.append("trailer\n  << /Root " + catalogObject.getReference().getObjectNumber() + " "
                + catalogObject.getReference().getGeneration() + " R" + "\n   /Size " + (objectCount + 1) + "\n  >>\n"
                + "%%EOF");

        return pdf.toString();
    }

    private void populateObjectNumbers() {
        catalogObject.setObjectNumber(++objectCount);
        catalogObject.getPages().setObjectNumber(++objectCount);

        for (PageObject page : catalogObject.getPages().getPages()) {
            page.setObjectNumber(++objectCount);

            if (page.getContent() != null) {
                page.getContent().setObjectNumber(++objectCount);
            }
        }
    }

}

/**
 * Representation of reference to any PDF object.
 */
class PDFObjectReference {
    private int objectNumber;

    private int generation = 0; // Hardcode as it remains same always

    int getObjectNumber() {
        return objectNumber;
    }

    int getGeneration() {
        return generation;
    }

    void setObjectNumber(int objectNumber) {
        this.objectNumber = objectNumber;
    }

}

/**
 * Abstract Representation of PDF objects. All objects in PDF must extend this.
 */
abstract class PDFObject {

    private PDFObjectReference reference = new PDFObjectReference();

    private Map<String, Object> attributes = new HashMap<>();

    public PDFObject(String type) {
        super();
        this.attributes.put("Type", type);
    }

    public void addAttribute(String key, Object value) {
        this.attributes.put(key, value);
    }

    public abstract void addSpecificAttributes();

    public String build() {

        addSpecificAttributes();

        StringBuilder pdfObject = new StringBuilder();
        pdfObject.append(reference.getObjectNumber()).append(" ").append(reference.getGeneration()).append(" obj\n  ")
                .append(buildObject()).append("\nendobj\n\n");

        return pdfObject.toString();
    }

    public StringBuilder buildObject() {
        StringBuilder pdfObject = new StringBuilder();
        pdfObject.append("<< \n");

        for (String key : attributes.keySet()) {

            Object value = attributes.get(key);
            if (value instanceof String) {
                pdfObject.append("\n     /").append(key).append(" ").append(((String) value).contains("[") ? "" : "/")
                        .append(value);
            } else if (value instanceof Integer) {
                pdfObject.append("\n     /").append(key).append(" ").append(value);
            } else if (value instanceof PDFObject) {
                pdfObject.append("\n     /").append(key).append(" \n").append(((PDFObject) value).buildObject());
            } else if (value instanceof PDFObjectReference[]) {

                pdfObject.append("\n     /").append(key).append(" [");
                for (PDFObjectReference ref : (PDFObjectReference[]) value) {
                    pdfObject.append(ref.getObjectNumber() + " " + ref.getGeneration() + " R ");
                }
                pdfObject.append("]");
            } else if (value instanceof PDFObjectReference) {
                pdfObject.append("\n     /").append(key).append(" ")
                        .append(((PDFObjectReference) value).getObjectNumber() + " "
                                + ((PDFObjectReference) value).getGeneration() + " R ");
            }
        }
        pdfObject.append("  >>");

        return pdfObject;
    }

    public void setObjectNumber(int objectNumber) {
        this.reference.setObjectNumber(objectNumber);
    }

    PDFObjectReference getReference() {
        return reference;
    }

}

/**
 * Representation of catalog object
 */
class CatalogObject extends PDFObject {

    private PageCollectionObject pages;

    public CatalogObject(PageCollectionObject pageCollectionObject) {
        super("Catalog");
        this.pages = pageCollectionObject;
    }

    @Override
    public void addSpecificAttributes() {
        addAttribute("Pages", pages.getReference());
    }

    PageCollectionObject getPages() {
        return pages;
    }

}

/**
 * Representation of page object.
 */
class PageObject extends PDFObject {

    private StreamObject content;

    public PageObject() {
        super("Page");
    }

    public void addContent(StreamObject streamObject) {
        content = streamObject;
    }

    @Override
    public void addSpecificAttributes() {
        addAttribute("Contents", content.getReference());
    }

    StreamObject getContent() {
        return content;
    }

}

/**
 * Representation of pages object
 */
class PageCollectionObject extends PDFObject {

    private List<PageObject> pages = new ArrayList<>();

    public PageCollectionObject() {
        super("Pages");
    }

    public void addPages(PageObject... pageObjects) {
        for (PageObject pageObject : pageObjects) {
            addPage(pageObject);
        }
    }

    public void addPage(PageObject pageObject) {
        this.pages.add(pageObject);
        pageObject.addAttribute("Parent", getReference());
    }

    @Override
    public void addSpecificAttributes() {
        addAttribute("Count", Integer.valueOf(pages.size()));
        PDFObjectReference[] refArr = new PDFObjectReference[pages.size()];
        for (int i = 0; i < pages.size(); i++) {
            refArr[i] = pages.get(i).getReference();
        }
        addAttribute("Kids", refArr);
    }

    List<PageObject> getPages() {
        return pages;
    }

}

/**
 * Representation of font object
 */
class FontObject extends PDFObject {

    public FontObject(String fontAliasName, String fontName) {
        super(null);

        PDFObject fontDef = new PDFObject("Font") {
            @Override
            public void addSpecificAttributes() {
                addAttribute("Subtype", "Type1");
                addAttribute("BaseFont", fontName);
            }
        };
        fontDef.addSpecificAttributes();

        PDFObject fontAlias = new PDFObject(null) {
            @Override
            public void addSpecificAttributes() {
                addAttribute(fontAliasName, fontDef);
            }
        };
        fontAlias.addSpecificAttributes();

        addAttribute("Font", fontAlias);
    }

    @Override
    public void addSpecificAttributes() {

    }

}

/**
 * Abstract Representation of stream object
 */
abstract class StreamObject extends PDFObject {

    public StreamObject() {
        super(null);
    }

    public abstract String buildStream();

    public void addSpecificAttributes() {
        addAttribute("Length", Integer.valueOf(100));
    }

    @Override
    public StringBuilder buildObject() {
        StringBuilder sb = super.buildObject();
        sb.append("\nstream").append(buildStream()).append("\nendstream\n");
        return sb;
    }

}

/**
 * Representation of text stream object
 */
class TextStreamObject extends StreamObject {

    private List<String> lines = new ArrayList<>();

    public TextStreamObject(String fontAliasName, int fontSize, int x, int y, String text) {
        add(fontAliasName, fontSize, x, y, text);
    }

    public void add(String fontAliasName, int fontSize, int x, int y, String text) {
        lines.add("BT /" + fontAliasName + " " + fontSize + " Tf " + x + " " + y + " Td (" + text + ") Tj ET\n");
    }

    @Override
    public String buildStream() {
        return lines.stream().collect(Collectors.joining());
    }

}

/**
 * Representation of graphic stream object
 */
class GraphicStreamObject extends StreamObject {

    private List<String> graphics = new ArrayList<>();

    public void addLine(int fromX, int fromY, int toX, int toY) {
        graphics.add(fromX + " " + fromY + " m " + toX + " " + toY + " l S\n");
    }

    public void addRectangle(int fromX, int fromY, int width, int height) {
        graphics.add(fromX + " " + fromY + " " + width + " " + height + " re S\n");
    }

    public void addFilledRectangle(int fromX, int fromY, int width, int height, String fillColor) {
        graphics.add(fillColor + " " + fromX + " " + fromY + " " + width + " " + height + " re f\n");
    }

    @Override
    public String buildStream() {
        return graphics.stream().collect(Collectors.joining());
    }

}
